name: Publish Packages and Docs

on:
  push:
    branches:
      - main
    paths:
      - '**/package.json'
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Run publish in dry-run mode (no actual publishing)'
        required: true
        default: 'true'
        type: choice
        options:
          - 'false'
          - 'true'
      force:
        description: 'Force publish/release even if no version changed'
        required: false
        default: 'false'
        type: choice
        options:
          - 'false'
          - 'true'

jobs:
  validate:
    uses: anthochamp/dev-toolbox/.github/workflows/node-validate.yml@0229da1f71114254ba19c62b209147e490e227e3
    with:
      node-package-manager: 'yarn'

  check_version_change:
    runs-on: ubuntu-latest
    outputs:
      version_changed: ${{ steps.version_check.outputs.version_changed }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Check for package.json version changes
        id: version_check
        run: |
          set -e
          last_tag_commit=$(git rev-list --tags --max-count=1)
          if [ -z "$last_tag_commit" ]; then
            # No tags exist yet, use the empty tree as the base
            last_tag_commit=$(git hash-object -t tree /dev/null)
          fi
          changed=false
          for file in $(git diff --name-only $last_tag_commit ${{ github.sha }} | grep 'package.json$'); do
            if [ "$last_tag_commit" = "$(git hash-object -t tree /dev/null)" ]; then
              # No tag, treat all as changed
              new_version=$(cat $file | jq -r .version)
              echo "🔄 $file: (no previous version) → $new_version"
              changed=true
              continue
            fi
            old_version=$(git show $last_tag_commit:$file | jq -r .version 2>/dev/null || echo "")
            new_version=$(cat $file | jq -r .version)
            if [ "$old_version" != "$new_version" ]; then
              echo "🔄 $file: $old_version → $new_version"
              changed=true
            else
              echo "ℹ️ $file: version unchanged ($new_version)"
            fi
          done
          echo "version_changed=$changed" >> $GITHUB_OUTPUT
          if [ "$changed" = true ]; then
            echo '🔄 Version change detected: true'
          else
            echo 'ℹ️ No version change detected: false'
          fi

  publish_and_release:
    permissions:
      contents: write
      packages: write
    runs-on: ubuntu-latest
    needs: [check_version_change, validate]
    if: |
      (github.event_name == 'workflow_dispatch' && github.event.inputs.force == 'true') ||
      (needs.check_version_change.outputs.version_changed == 'true')
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc
      - name: Install dependencies
        run: |
          corepack enable
          yarn install
      - name: Publish Packages
        id: publish
        run: |
          set -e
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.dry_run }}" == "true" ]]; then
            yarn workspaces foreach -A --no-private npm publish --tolerate-republish --dry-run || true
          else
            yarn workspaces foreach -A --no-private npm publish --tolerate-republish --json > publish.log || true
          fi
          echo '--- publish.log ---'
          if [ -f publish.log ]; then
            cat publish.log
          else
            echo 'publish.log not found.'
          fi
        env:
          YARN_NPM_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      - name: Extract published packages
        if: github.event_name != 'workflow_dispatch' || github.event.inputs.dry_run != 'true'
        run: |
          if [ -f publish.log ]; then
            grep '"type":"success"' publish.log | while read line; do
              echo "$line" | jq -r '.data.name + "@" + .data.version'
            done > published-packages.txt
          fi
          echo '--- published-packages.txt ---'
          if [ -f published-packages.txt ]; then
            cat published-packages.txt
          else
            echo 'published-packages.txt not found.'
          fi
      - name: Create and push tags for published packages
        if: github.event_name != 'workflow_dispatch' || github.event.inputs.dry_run != 'true'
        run: |
          set -e
          if [ -f published-packages.txt ]; then
            while read pkgver; do
              tag=$(echo "$pkgver" | tr '/' '-')
              echo "Creating tag: $tag"
              git tag "$tag"
            done < published-packages.txt
            git config user.name github-actions
            git config user.email github-actions@github.com
            git push --tags
          fi
      - name: Generate release notes
        if: github.event_name != 'workflow_dispatch' || github.event.inputs.dry_run != 'true'
        id: notes
        run: |
          if [ -f published-packages.txt ]; then
            echo '### Published packages:' > release-notes.md
            while read pkgver; do
              echo "- $pkgver" >> release-notes.md
            done < published-packages.txt
            echo '' >> release-notes.md
            echo '### Commits included in this release:' >> release-notes.md
            git log --pretty=format:'- %s (%h)' ${{ github.event.before }}..${{ github.sha }} >> release-notes.md
            echo "release_body<<EOF" >> $GITHUB_OUTPUT
            cat release-notes.md >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi
      - name: Create GitHub Releases
        if: github.event_name != 'workflow_dispatch' || github.event.inputs.dry_run != 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: multi-package-release-${{ github.sha }}
          name: Multi-package release ${{ github.sha }}
          body: ${{ steps.notes.outputs.release_body }}
          draft: true
          files: |
            packages/*/dist/**
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  generate_and_publish_doc:
    permissions:
      contents: read
      pages: write
    needs: publish_and_release
    runs-on: ubuntu-latest
    if: github.event.inputs.dry_run != 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc
      - name: Install dependencies
        run: |
          corepack enable
          yarn install
      - name: Build TypeDoc docs for all packages
        run: |
          yarn run build-doc
      - name: Prepare docs for GitHub Pages
        run: |
          mkdir gh-pages
          yarn workspaces list --json | jq -r '.location' | while read pkg; do
            name=$(basename "$pkg")
            if [ -d "$pkg/doc/generated" ]; then
              mkdir -p "gh-pages/$name"
              cp -r "$pkg/doc/generated/." "gh-pages/$name/"
            fi
          done
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./gh-pages
          publish_branch: gh-pages
          force_orphan: true
