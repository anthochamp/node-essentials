name: Publish Packages and Docs

on:
  push:
    branches:
      - main
    paths:
      - '**/package.json'
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Run publish in dry-run mode (no actual publishing)'
        required: true
        default: 'true'
        type: choice
        options:
          - 'false'
          - 'true'
      force:
        description: 'Force publish/release even if no version changed'
        required: false
        default: 'false'
        type: choice
        options:
          - 'false'
          - 'true'

env:
  PACKAGE_SCOPE: "@ac-essentials/"

jobs:
  validate:
    uses: anthochamp/dev-toolbox/.github/workflows/node-validate.yml@0229da1f71114254ba19c62b209147e490e227e3
    with:
      node-package-manager: 'yarn'

  publish:
    permissions:
      contents: write
      packages: write
    runs-on: ubuntu-latest
    needs: [validate]
    outputs:
      version_changed: ${{ steps.version_check.outputs.version_changed }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc
      - name: Check for package.json version changes
        id: version_check
        run: |
          set -e
          last_tag_commit=$(git rev-list --tags --max-count=1)
          if [ -z "$last_tag_commit" ]; then
            # No tags exist yet, use the empty tree as the base
            last_tag_commit=$(git hash-object -t tree /dev/null)
          fi
          changed=false
          for file in $(git diff --name-only $last_tag_commit ${{ github.sha }} | grep 'package.json$'); do
            if [ "$last_tag_commit" = "$(git hash-object -t tree /dev/null)" ]; then
              # No tag, treat all as changed
              new_version=$(cat $file | jq -r .version)
              echo "🔄 $file: (no previous version) → $new_version"
              changed=true
              continue
            fi
            old_version=$(git show $last_tag_commit:$file | jq -r .version 2>/dev/null || echo "")
            new_version=$(cat $file | jq -r .version)
            if [ "$old_version" != "$new_version" ]; then
              echo "🔄 $file: $old_version → $new_version"
              changed=true
            else
              echo "ℹ️ $file: version unchanged ($new_version)"
            fi
          done
          echo "version_changed=$changed" >> $GITHUB_OUTPUT
          if [ "$changed" = true ]; then
            echo '🔄 Version change detected: true'
          else
            echo 'ℹ️ No version change detected: false'
          fi
      - name: Install dependencies
        if: |
          (github.event_name == 'workflow_dispatch' && github.event.inputs.force == 'true') || steps.version_check.outputs.version_changed == 'true'
        run: |
          corepack enable
          yarn install
      - name: Publish Packages
        if: |
          (github.event_name == 'workflow_dispatch' && github.event.inputs.force == 'true') || steps.version_check.outputs.version_changed == 'true'
        id: publish
        run: |
          set -e
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.dry_run }}" == "true" ]]; then
            yarn workspaces foreach -A --no-private npm publish --tolerate-republish --dry-run || true
          else
            yarn workspaces foreach -A --no-private npm publish --tolerate-republish --json > publish.log || true
          fi
          echo '--- publish.log ---'
          if [ -f publish.log ]; then
            cat publish.log
          else
            echo 'publish.log not found.'
          fi
        env:
          YARN_NPM_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  generate_and_publish_doc:
    permissions:
      contents: write
      pages: write
    needs: publish
    runs-on: ubuntu-latest
    if: github.event.inputs.dry_run != 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc
      - name: Install dependencies
        run: |
          corepack enable
          yarn install
      - name: Build TypeDoc docs for all packages
        run: |
          yarn run build-doc
      - name: Prepare docs for GitHub Pages
        run: |
          mkdir gh-pages
          # Prepare docs for all packages
          for pkg_dir in $(yarn workspaces list --json | jq -r '.location'); do
            pkg=$(basename "$pkg_dir")
            if [ -d "$pkg_dir/doc/generated" ]; then
              mkdir -p "gh-pages/$pkg"
              cp -r "$pkg_dir/doc/generated/." "gh-pages/$pkg/"
            fi
          done
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./gh-pages
          force_orphan: true

  release:
    permissions:
      contents: write
    needs: publish
    runs-on: ubuntu-latest
    if: github.event.inputs.dry_run != 'true'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Fetch all tags
        run: git fetch --tags
      - name: Create and push tags for all package versions
        run: |
          set -e
          > new-tags.txt
          find . -name package.json -not -path '*/node_modules/*' | while read file; do
            if [ "$(jq -r .private \"$file\" 2>/dev/null)" = "true" ]; then
              echo "$file is private, skipping."
              continue
            fi
            name=$(jq -r .name "$file")
            version=$(jq -r .version "$file")
            name_stripped=${name#$PACKAGE_SCOPE}
            tag="${name_stripped}_v${version}"
            if git rev-parse "$tag" >/dev/null 2>&1; then
              echo "Tag $tag already exists, skipping."
            else
              echo "Creating tag: $tag"
              git tag "$tag"
              echo "$tag" >> new-tags.txt
            fi
          done
          git config user.name github-actions
          git config user.email github-actions@github.com
          git push --tags
      - name: Generate release notes for new tags and check if should publish
        id: notes
        run: |
          echo "# Release Notes" > release-notes.md
          has_release_notes=false
          if [ -s new-tags.txt ]; then
            for tag in $(cat new-tags.txt); do
              if [ -z "$(git tag -l --format='%(contents:subject)' "$tag")" ]; then
                echo "\n## $tag" >> release-notes.md
                git log --pretty=format:'- %s (%h)' "$tag"^.."$tag" >> release-notes.md
                has_release_notes=true
              fi
            done
          fi
          if ! $has_release_notes; then
            echo "No new tags created in this run." >> release-notes.md
          fi
          echo "has_release_notes=$has_release_notes" >> $GITHUB_OUTPUT
          cat release-notes.md
      - name: Create GitHub Releases for new tags
        if: steps.notes.outputs.has_release_notes == 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: multi-package-release-${{ github.sha }}
          name: Multi-package release ${{ github.sha }}
          body_path: release-notes.md
          draft: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

