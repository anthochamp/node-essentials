name: Publish Packages and Docs

on:
  push:
    branches:
      - main
    paths:
      - '**/package.json'
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Run publish in dry-run mode (no actual publishing)'
        required: true
        default: 'true'
        type: choice
        options:
          - 'false'
          - 'true'

env:
  PACKAGE_SCOPE: "@ac-essentials/"

jobs:
  validate:
    uses: anthochamp/dev-toolbox/.github/workflows/node-validate.yml@8581130ad2a7165cbf4ba9610cf9d905b292de56
    with:
      node-package-manager: 'yarn'

  publish:
    permissions:
      contents: write
      packages: write
    runs-on: ubuntu-latest
    needs: [validate]
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        with:
          fetch-depth: 0
      - name: Install and enable corepack
        run: |
          npm install -g corepack
          corepack enable
      - uses: actions/setup-node@a0853c24544627f65ddf259abe73b1d18a591444 # v5
        with:
          node-version-file: .nvmrc
      - name: Install dependencies
        run: yarn install
      - name: Publish Packages
        id: publish
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.dry_run }}" == "true" ]]; then
            yarn publish --dry-run
          else
            yarn publish
          fi
        env:
          YARN_NPM_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  generate_and_publish_doc:
    permissions:
      contents: write
      pages: write
    needs: publish
    runs-on: ubuntu-latest
    if: github.event.inputs.dry_run != 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
      - name: Install and enable corepack
        run: |
          npm install -g corepack
          corepack enable
      - name: Set up Node.js
        uses: actions/setup-node@a0853c24544627f65ddf259abe73b1d18a591444 # v5
        with:
          node-version-file: .nvmrc
      - name: Install dependencies
        run: yarn install
      - name: Build docs for all packages
        run: |
          yarn run build-doc
      - name: Prepare docs for GitHub Pages
        run: |
          mkdir gh-pages
          # Prepare docs for all packages
          for pkg_dir in $(yarn workspaces list --json | jq -r '.location'); do
            pkg=$(basename "$pkg_dir")
            if [ -d "$pkg_dir/doc/generated" ]; then
              mkdir -p "gh-pages/$pkg"
              cp -r "$pkg_dir/doc/generated/." "gh-pages/$pkg/"
            fi
          done
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@4f9cc6602d3f66b9c108549d475ec49e8ef4d45e # v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./gh-pages
          force_orphan: true

  release:
    permissions:
      contents: write
    needs: publish
    runs-on: ubuntu-latest
    if: github.event.inputs.dry_run != 'true'
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        with:
          fetch-depth: 0
      - name: Fetch all tags
        run: git fetch --tags
      - name: Create and push tags for all package versions
        run: |
          set -e
          > new-tags.txt
          find . -name package.json -not -path '*/node_modules/*' | while read file; do
            if [ "$(jq -r .private $file 2>/dev/null)" = "true" ]; then
              echo "$file is private, skipping."
              continue
            fi
            name=$(jq -r .name "$file")
            version=$(jq -r .version "$file")
            name_stripped=${name#$PACKAGE_SCOPE}
            tag="${name_stripped}_v${version}"
            if git rev-parse "$tag" >/dev/null 2>&1; then
              echo "Tag $tag already exists, skipping."
            else
              echo "Creating tag: $tag"
              git tag "$tag"
              echo "$tag" >> new-tags.txt
            fi
          done
          git config user.name github-actions
          git config user.email github-actions@github.com
          git push --tags
      - name: Generate release notes for new tags and check if should publish
        id: notes
        run: |
          echo "# Release Notes" > release-notes.md
          has_release_notes=false
          if [ -s new-tags.txt ]; then
            for tag in $(cat new-tags.txt); do
              # Extract the package id (everything before _v)
              pkg_id="${tag%_v*}"
              # Find the previous tag for this package, excluding the current tag
              prev_tag=$(git tag --list "${pkg_id}_*" --sort=-v:refname | grep -v "^${tag}$" | head -n 1)
              echo -e "\n## $tag" >> release-notes.md
              if [ -n "$prev_tag" ]; then
                git log --pretty=format:'- %s (%h)' "$prev_tag".."$tag" >> release-notes.md
              else
                git log --pretty=format:'- %s (%h)' "$tag" >> release-notes.md
              fi
              has_release_notes=true
            done
          fi
          if ! $has_release_notes; then
            echo "No new tags created in this run." >> release-notes.md
          fi
          echo "has_release_notes=$has_release_notes" >> $GITHUB_OUTPUT
          cat release-notes.md
      - name: Create GitHub Releases for new tags
        if: steps.notes.outputs.has_release_notes == 'true'
        uses: softprops/action-gh-release@6da8fa9354ddfdc4aeace5fc48d7f679b5214090 # v2
        with:
          tag_name: multi-package-release-${{ github.sha }}
          name: Multi-package release ${{ github.sha }}
          body_path: release-notes.md
          draft: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

